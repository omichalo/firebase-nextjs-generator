name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  FIREBASE_VERSION: '14.3.1'

jobs:
  # Job de validation et tests
  validate-and-test:
    name: Validate & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build generator
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run type-check

  # Job de g√©n√©ration de projet de test
  generate-test-project:
    name: Generate Test Project
    runs-on: ubuntu-latest
    needs: validate-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build generator
        run: npm run build

      - name: Generate test project
        run: |
          node dist/cli.js create \
            --name "ci-test-project" \
            --output "./ci-test-output" \
            --yes \
            --ui "mui" \
            --state-management "zustand" \
            --features "pwa,fcm,analytics,performance,sentry"

      - name: Test project structure
        run: |
          test -d "./ci-test-output/frontend"
          test -d "./ci-test-output/backend"
          test -f "./ci-test-output/frontend/package.json"
          test -f "./ci-test-output/backend/firebase.json"

      - name: Build frontend
        run: |
          cd ci-test-output/frontend
          npm install
          npm run build

      - name: Build backend functions
        run: |
          cd ci-test-output/backend/functions
          npm install
          npm run build

  # Job de d√©ploiement (seulement sur main)
  deploy:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    needs: [validate-and-test, generate-test-project]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@${{ env.FIREBASE_VERSION }}

      - name: Deploy to Firebase
        run: |
          firebase deploy --token "${{ secrets.FIREBASE_TOKEN }}" --project "${{ secrets.FIREBASE_PROJECT_ID }}"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

  # Job de notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [validate-and-test, generate-test-project, deploy]
    if: always()

    steps:
      - name: Notify success
        if: needs.validate-and-test.result == 'success' && needs.generate-test-project.result == 'success'
        run: |
          echo "üéâ All CI/CD checks passed successfully!"

      - name: Notify failure
        if: needs.validate-and-test.result == 'failure' || needs.generate-test-project.result == 'failure'
        run: |
          echo "‚ùå CI/CD checks failed!"
          exit 1
