# Guide de D√©ploiement - {{project.name}}

## üöÄ D√©ploiement Automatique

### Pr√©requis

1. **Compte Firebase** configur√©
2. **GitHub Actions** activ√© sur le repository
3. **Secrets GitHub** configur√©s :
   - `FIREBASE_TOKEN`
   - `FIREBASE_PROJECT_DEV`
   - `FIREBASE_PROJECT_PROD`

### Configuration des Secrets

1. Allez dans votre repository GitHub
2. **Settings** ‚Üí **Secrets and variables** ‚Üí **Actions**
3. Ajoutez les secrets suivants :

```bash
FIREBASE_TOKEN=your_firebase_token_here
FIREBASE_PROJECT_DEV=your-dev-project-id
FIREBASE_PROJECT_PROD=your-prod-project-id
```

### D√©ploiement Automatique

Le d√©ploiement se fait automatiquement via GitHub Actions :

- **Branche `develop`** ‚Üí D√©ploiement en **d√©veloppement**
- **Branche `main`** ‚Üí D√©ploiement en **production**

## üîß D√©ploiement Manuel

### 1. Build de l'Application

```bash
cd frontend
npm run build
```

### 2. D√©ploiement Firebase

```bash
cd ../backend
firebase login
firebase use dev  # ou prod
firebase deploy
```

### 3. D√©ploiement Frontend

```bash
cd ../frontend
npm run export  # Si vous utilisez l'export statique
# Ou d√©ployez directement sur Vercel/Netlify
```

## üåç Environnements

### D√©veloppement

```bash
# Configuration
firebase use dev

# D√©ploiement
firebase deploy --only hosting,functions

# Variables d'environnement
cp .env.dev .env.local
```

### Production

```bash
# Configuration
firebase use prod

# D√©ploiement
firebase deploy --only hosting,functions

# Variables d'environnement
cp .env.prod .env.local
```

## üì± D√©ploiement PWA

Si vous avez activ√© la fonctionnalit√© PWA :

1. **Build de production** : `npm run build`
2. **V√©rification du manifest** : V√©rifiez `public/manifest.json`
3. **Service Worker** : V√©rifiez `public/sw.js`
4. **D√©ploiement** : `firebase deploy --only hosting`

## üîí S√©curit√©

### R√®gles Firestore

```javascript
// Exemple de r√®gles s√©curis√©es
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
```

### R√®gles Storage

```javascript
// Exemple de r√®gles s√©curis√©es
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /uploads/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
```

## üìä Monitoring

### Firebase Console

- **Analytics** : Suivi des utilisateurs
- **Performance** : Monitoring des performances
- **Crashlytics** : Rapports de crash (si activ√©)

### Sentry (si activ√©)

- **Error Tracking** : Suivi des erreurs
- **Performance Monitoring** : M√©triques de performance
- **Release Tracking** : Suivi des d√©ploiements

## üö® Rollback

### Rollback Firebase

```bash
# Lister les d√©ploiements
firebase hosting:releases

# Rollback vers une version pr√©c√©dente
firebase hosting:rollback [version]
```

### Rollback GitHub Actions

1. Allez dans l'onglet **Actions** de votre repository
2. Trouvez le workflow de d√©ploiement
3. Cliquez sur **Re-run jobs** pour relancer un d√©ploiement pr√©c√©dent

## üìû Support

En cas de probl√®me :

1. **Logs Firebase** : `firebase functions:log`
2. **Logs GitHub Actions** : Onglet Actions du repository
3. **Documentation** : [Firebase Docs](https://firebase.google.com/docs)
4. **Support** : [Firebase Support](https://firebase.google.com/support) 