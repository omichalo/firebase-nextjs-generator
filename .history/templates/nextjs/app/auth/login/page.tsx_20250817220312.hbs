{{#ifEquals nextjs.ui "mui"}}
'use client';

import { useState } from 'react';
import { Container, Typography, Box, TextField, Button, Alert } from '@mui/material';
import { useAuth } from '@/hooks/use-auth';
import { useRouter } from 'next/navigation';
{{/ifEquals}}

{{#ifEquals nextjs.ui "shadcn"}}
'use client';

import { useState } from 'react';
import { useAuth } from '@/hooks/use-auth';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
{{/ifEquals}}

export default function LoginPage() {
  {{#ifEquals nextjs.ui "mui"}}
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const { signIn, isLoading } = useAuth();
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    try {
      await signIn(email, password);
      router.push('/dashboard');
    } catch (error) {
      setError('Identifiants invalides');
      console.error('Erreur de connexion:', error);
    }
  };

  return (
    <Container maxWidth="sm">
      <Box className="min-h-screen flex flex-col items-center justify-center">
        <Typography variant="h3" component="h1" gutterBottom>
          Connexion à votre compte
        </Typography>
        
        {error && (
          <Alert severity="error" className="w-full mb-4">
            {error}
          </Alert>
        )}

        <Box component="form" onSubmit={handleSubmit} className="w-full space-y-4">
          <TextField
            fullWidth
            label="Adresse email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            variant="outlined"
            placeholder="Adresse email"
          />
          
          <TextField
            fullWidth
            label="Mot de passe"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            variant="outlined"
            placeholder="Mot de passe"
          />

          <Button
            type="submit"
            fullWidth
            variant="contained"
            size="large"
            disabled={isLoading}
            className="mt-6"
          >
            {isLoading ? 'Connexion...' : 'Se connecter'}
          </Button>
        </Box>
        
        <Box className="mt-4 text-center">
          <Button 
            component="a"
            href="/"
            variant="text"
            color="primary"
          >
            Retour à l'accueil
          </Button>
        </Box>
      </Box>
    </Container>
  );
  {{/ifEquals}}

  {{#ifEquals nextjs.ui "shadcn"}}
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const { signIn, isLoading } = useAuth();
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    try {
      await signIn(email, password);
      router.push('/dashboard');
    } catch (error) {
      setError('Identifiants invalides');
      console.error('Erreur de connexion:', error);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Connexion à votre compte
          </h2>
        </div>
        
        {error && (
          <Alert>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <Label htmlFor="email">Adresse email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Adresse email"
              />
            </div>
            <div>
              <Label htmlFor="password">Mot de passe</Label>
              <Input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                required
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Mot de passe"
              />
            </div>
          </div>

          <Button
            type="submit"
            className="w-full"
            disabled={isLoading}
          >
            {isLoading ? 'Connexion...' : 'Se connecter'}
          </Button>
        </form>
        
        <div className="text-center">
          <Link 
            href="/"
            className="text-indigo-600 hover:text-indigo-500"
          >
            Retour à l'accueil
          </Link>
        </div>
      </div>
    </div>
  );
  {{/ifEquals}}
} 