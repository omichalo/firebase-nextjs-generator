import { initializeApp, getApps } from 'firebase/app';
import { getAuth, connectAuthEmulator } from 'firebase/auth';
import { getFirestore, connectFirestoreEmulator } from 'firebase/firestore';
import { getStorage, connectStorageEmulator } from 'firebase/storage';
import { getFunctions, connectFunctionsEmulator } from 'firebase/functions';
import { getAnalytics, isSupported as isAnalyticsSupported } from 'firebase/analytics';
import { getPerformance } from 'firebase/performance';

// Configuration Firebase
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
};

// Initialiser Firebase
let app;
if (!getApps().length) {
  app = initializeApp(firebaseConfig);
} else {
  app = getApps()[0];
}

// Services Firebase
export const auth = getAuth(app);
export const db = getFirestore(app);
export const storage = getStorage(app);
export const functions = getFunctions(app);

// Analytics (si supporté)
export const analytics = isAnalyticsSupported().then(yes => yes ? getAnalytics(app) : null);

// Performance (si supporté)
export const performance = isPerformanceSupported().then(yes => yes ? getPerformance(app) : null);

// Configuration des émulateurs en développement
if (process.env.NODE_ENV === 'development') {
  // Émulateur Auth
  if (process.env.NEXT_PUBLIC_USE_AUTH_EMULATOR === 'true') {
    connectAuthEmulator(auth, 'http://localhost:9099');
  }
  
  // Émulateur Firestore
  if (process.env.NEXT_PUBLIC_USE_FIRESTORE_EMULATOR === 'true') {
    connectFirestoreEmulator(db, 'localhost', 8080);
  }
  
  // Émulateur Storage
  if (process.env.NEXT_PUBLIC_USE_STORAGE_EMULATOR === 'true') {
    connectStorageEmulator(storage, 'localhost', 9199);
  }
  
  // Émulateur Functions
  if (process.env.NEXT_PUBLIC_USE_FUNCTIONS_EMULATOR === 'true') {
    connectFunctionsEmulator(functions, 'localhost', 5001);
  }
}

export default app; 