#!/bin/bash

# Script de publication pour GitHub et npm
# Usage: ./publish.sh [patch|minor|major]

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Script de publication Firebase Next.js Generator (Beta)${NC}"
echo

# V√©rification des pr√©requis
echo -e "${BLUE}üîç V√©rification des pr√©requis...${NC}"

if ! command -v git &> /dev/null; then
    echo -e "${RED}‚ùå Git n'est pas install√©${NC}"
    exit 1
fi

if ! command -v npm &> /dev/null; then
    echo -e "${RED}‚ùå npm n'est pas install√©${NC}"
    exit 1
fi

if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js n'est pas install√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Tous les pr√©requis sont satisfaits${NC}"
echo

# V√©rification du statut Git
echo -e "${BLUE}üîç V√©rification du statut Git...${NC}"

if [ -n "$(git status --porcelain)" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Il y a des modifications non commit√©es${NC}"
    git status --short
    echo
    read -p "Voulez-vous continuer ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}‚ùå Publication annul√©e${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ Aucune modification non commit√©e${NC}"
fi

# V√©rification de la branche
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" != "main" ] && [ "$CURRENT_BRANCH" != "master" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Vous n'√™tes pas sur la branche main/master (actuellement sur $CURRENT_BRANCH)${NC}"
    read -p "Voulez-vous continuer ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}‚ùå Publication annul√©e${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ Branche v√©rifi√©e${NC}"
echo

# Type de version
VERSION_TYPE=${1:-patch}
if [[ ! "$VERSION_TYPE" =~ ^(patch|minor|major)$ ]]; then
    echo -e "${RED}‚ùå Type de version invalide. Utilisez: patch, minor, ou major${NC}"
    exit 1
fi

echo -e "${BLUE}üì¶ Type de version: ${VERSION_TYPE}${NC}"
echo

# V√©rification rapide (optionnelle)
echo -e "${BLUE}üîç V√©rification rapide...${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  Tests et build seront ex√©cut√©s automatiquement par GitHub Actions${NC}"
echo -e "${GREEN}‚úÖ V√©rification locale ignor√©e${NC}"
echo

# Mise √† jour de la version
echo -e "${BLUE}üìà Mise √† jour de la version...${NC}"
OLD_VERSION=$(npm version --json | grep '"version"' | cut -d'"' -f4)
npm version $VERSION_TYPE --no-git-tag-version
NEW_VERSION=$(npm version --json | grep '"version"' | cut -d'"' -f4)
echo -e "${GREEN}‚úÖ Version mise √† jour: $OLD_VERSION ‚Üí $NEW_VERSION${NC}"
echo

# Commit des changements
echo -e "${BLUE}üíæ Commit des changements...${NC}"
git add package.json package-lock.json
git commit -m "chore: bump version to $NEW_VERSION"
echo -e "${GREEN}‚úÖ Changements commit√©s${NC}"
echo

# Tag de version
echo -e "${BLUE}üè∑Ô∏è  Cr√©ation du tag de version...${NC}"
git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
echo -e "${GREEN}‚úÖ Tag v$NEW_VERSION cr√©√©${NC}"
echo

# Push vers GitHub
echo -e "${BLUE}üöÄ Push vers GitHub...${NC}"
git push origin $CURRENT_BRANCH
git push origin "v$NEW_VERSION"
echo -e "${GREEN}‚úÖ Code et tags pouss√©s vers GitHub${NC}"
echo

# Publication sur npm
echo -e "${BLUE}üì§ Publication sur npm...${NC}"
read -p "Voulez-vous publier sur npm ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    if npm publish; then
        echo -e "${GREEN}‚úÖ Package publi√© sur npm avec succ√®s !${NC}"
        echo -e "${BLUE}üåê URL: https://www.npmjs.com/package/firebase-nextjs-generator${NC}"
    else
        echo -e "${RED}‚ùå √âchec de la publication sur npm${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Publication npm annul√©e${NC}"
fi
echo

# Nettoyage
echo -e "${BLUE}üßπ Nettoyage...${NC}"
rm -f firebase-nextjs-generator-*.tgz
echo -e "${GREEN}‚úÖ Nettoyage termin√©${NC}"
echo

# R√©sum√© final
echo -e "${GREEN}üéâ Publication termin√©e avec succ√®s !${NC}"
echo
echo -e "${BLUE}üìã R√©sum√©:${NC}"
echo "  üì¶ Version: $NEW_VERSION"
echo "  üè∑Ô∏è  Tag: v$NEW_VERSION"
echo "  üåê GitHub: Pouss√© avec succ√®s"
echo "  üì§ npm: $([ -n "$PACKAGE_FILE" ] && echo "Publi√©" || echo "Non publi√©")"
echo
echo -e "${BLUE}üöÄ Prochaines √©tapes:${NC}"
echo "  1. V√©rifier le tag sur GitHub"
echo "  2. Cr√©er une release GitHub si n√©cessaire"
echo "  3. V√©rifier la publication npm"
echo "  4. Tester l'installation: npm install -g firebase-nextjs-generator"
echo
echo -e "${GREEN}üéØ Votre g√©n√©rateur est maintenant public !${NC}" 